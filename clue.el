;;; clue.el --- Connecting clues while reading code -*- lexical-binding: t -*-

;; Copyright (C) 2020 Hao WANG

;; Author: Hao WANG <amaikinono@gmail.com>
;; Maintainer: Hao WANG <amaikinono@gmail.com>
;; Created: 08 Nov 2020
;; Keywords: convenience, tools
;; Homepage: https://github.com/AmaiKinono/clue
;; Version: 0

;; This file is NOT part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

;; To see the outline of this file, run M-x outline-minor-mode and
;; then press C-c @ C-t. To also show the top-level functions and
;; variable declarations in each section, run M-x occur with the
;; following query: ^;;;;* \|^(

;;;; User options

(defgroup clue nil
  "Connecting clues while reading code."
  :group 'convenience
  :group 'tools
  :prefix "clue-"
  :link '(url-link "https://github.com/AmaiKinono/clue"))

(defcustom clue-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "RET") 'clue-follow-link)
    (define-key map (kbd "<mouse-1>") 'clue-follow-link)
    map)
  "Keymap that's enabled on links."
  :type 'keymap)

;;;; Internals

(defvar clue--link-regexp
  ;; generated by (rx "#[" (zero-or-more (not (or "[" "]"))) "]")
  "#\\[[^][]*]"
  "Regexp to match links.")

(defun clue--unfontify (beg end)
  "Remove fontification of links between BEG and END."
  (dolist (ov (overlays-in beg end))
    (when (overlay-get ov 'clue-link-p)
      (delete-overlay ov))))

(defun clue--fontify (beg end)
  "Fontify the links between BEG and END."
  (save-excursion
    (goto-char beg)
    (while (re-search-forward clue--link-regexp end t)
      (let* ((b (match-beginning 0))
             (e (match-end 0))
             ov)
        (setq ov (make-overlay b e))
        (overlay-put ov 'clue-link-p t)
        (overlay-put ov 'face 'button)
        (overlay-put ov 'mouse-face 'link)
        (overlay-put ov 'evaporate t)
        (overlay-put ov 'keymap clue-keymap)))))

(defun clue--refontify (beg end)
  "Refontify the links between BEG and END.
This is for use with jit-lock fontification, so the region to
refontify includes the two logical lines including BEG and END,
to prevent miss caused by line truncation inside the clues."
  (let ((beg (save-excursion (goto-char beg)
                             (line-beginning-position)))
        (end (save-excursion (goto-char end)
                             (line-end-position))))
    (clue--unfontify beg end)
    (clue--fontify beg end)))

;;;; Commands

(defun clue-follow-link ()
  "Follow the link under point."
  (interactive)
  (message "Jump!"))

;;;###autoload
(define-minor-mode clue-mode
  "Connect your clues in code reading."
  :lighter " Clue"
  (cond
   (clue-mode
    (jit-lock-register #'clue--refontify))
   (t
    (jit-lock-unregister #'clue--refontify)
    (save-restriction
      (widen)
      (clue--unfontify (point-min) (point-max))))))

;; Test: #[a link]

(provide 'clue)

;; Local Variables:
;; outline-regexp: ";;;;* "
;; indent-tabs-mode: nil
;; fill-column: 79
;; emacs-lisp-docstring-fill-column: 65
;; sentence-end-double-space: t
;; End:

;;; clue.el ends here
